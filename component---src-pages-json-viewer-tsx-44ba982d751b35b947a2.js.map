{"version":3,"sources":["webpack:///./src/pages/jsonViewer.tsx","webpack:///./node_modules/@material-ui/core/esm/CircularProgress/CircularProgress.js"],"names":["ReactJson","React","lazy","withLayout","useState","json","setJSON","isValidJSON","useMemo","JSON","parse","err","fullWidth","multiline","rows","label","variant","value","onChange","evt","target","color","Suspense","fallback","src","title","easeOut","t","min","max","Math","CircularProgress","props","ref","classes","className","_props$color","_props$disableShrink","disableShrink","_props$size","size","style","_props$thickness","thickness","_props$value","_props$variant","other","circleStyle","rootStyle","rootProps","circumference","PI","strokeDasharray","toFixed","round","strokeDashoffset","concat","transform","root","indeterminate","width","height","role","svg","viewBox","SIZE","circle","circleDisableShrink","circleIndeterminate","circleStatic","cx","cy","r","fill","strokeWidth","theme","display","transition","transitions","create","animation","colorPrimary","palette","primary","main","colorSecondary","secondary","stroke","name","flip"],"mappings":"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","file":"component---src-pages-json-viewer-tsx-44ba982d751b35b947a2.js","sourcesContent":["import { CardContent, CircularProgress, TextField, Typography } from '@material-ui/core'\nimport React from 'react'\n\nimport { withLayout } from '../components/withLayout'\n\nconst ReactJson = React.lazy(() => import('react-json-view'))\n\nconst JSONViewer = () => {\n  const [json, setJSON] = React.useState('')\n\n  const isValidJSON = React.useMemo(() => {\n    try {\n      JSON.parse(json)\n      return true\n    } catch (err) {\n      return false\n    }\n  }, [json])\n\n  return (\n    <>\n      <TextField\n        fullWidth\n        multiline\n        rows={5}\n        label=\"Paste JSON here\"\n        variant=\"outlined\"\n        value={json}\n        onChange={(evt) => setJSON(evt.target.value)}\n      />\n      <CardContent>\n        {!isValidJSON && json && <Typography color=\"error\">Invalid JSON</Typography>}\n        {isValidJSON && (\n          <React.Suspense fallback={<CircularProgress color=\"secondary\" />}>\n            <ReactJson src={JSON.parse(json)} />\n          </React.Suspense>\n        )}\n      </CardContent>\n    </>\n  )\n}\n\nexport default withLayout(JSONViewer, {\n  title: 'JSON Viewer',\n})\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nvar SIZE = 44;\n\nfunction getRelativeValue(value, min, max) {\n  return (Math.min(Math.max(min, value), max) - min) / (max - min);\n}\n\nfunction easeOut(t) {\n  t = getRelativeValue(t, 0, 1); // https://gist.github.com/gre/1650294\n\n  t = (t -= 1) * t * t + 1;\n  return t;\n}\n\nfunction easeIn(t) {\n  return t * t;\n}\n\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'inline-block'\n    },\n\n    /* Styles applied to the root element if `variant=\"static\"`. */\n    \"static\": {\n      transition: theme.transitions.create('transform')\n    },\n\n    /* Styles applied to the root element if `variant=\"indeterminate\"`. */\n    indeterminate: {\n      animation: '$circular-rotate 1.4s linear infinite'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the `svg` element. */\n    svg: {\n      display: 'block' // Keeps the progress centered\n\n    },\n\n    /* Styles applied to the `circle` svg path. */\n    circle: {\n      stroke: 'currentColor' // Use butt to follow the specification, by chance, it's already the default CSS value.\n      // strokeLinecap: 'butt',\n\n    },\n\n    /* Styles applied to the `circle` svg path if `variant=\"static\"`. */\n    circleStatic: {\n      transition: theme.transitions.create('stroke-dashoffset')\n    },\n\n    /* Styles applied to the `circle` svg path if `variant=\"indeterminate\"`. */\n    circleIndeterminate: {\n      animation: '$circular-dash 1.4s ease-in-out infinite',\n      // Some default value that looks fine waiting for the animation to kicks in.\n      strokeDasharray: '80px, 200px',\n      strokeDashoffset: '0px' // Add the unit to fix a Edge 16 and below bug.\n\n    },\n    '@keyframes circular-rotate': {\n      '100%': {\n        transform: 'rotate(360deg)'\n      }\n    },\n    '@keyframes circular-dash': {\n      '0%': {\n        strokeDasharray: '1px, 200px',\n        strokeDashoffset: '0px'\n      },\n      '50%': {\n        strokeDasharray: '100px, 200px',\n        strokeDashoffset: '-15px'\n      },\n      '100%': {\n        strokeDasharray: '100px, 200px',\n        strokeDashoffset: '-125px'\n      }\n    },\n\n    /* Styles applied to the `circle` svg path if `disableShrink={true}`. */\n    circleDisableShrink: {\n      animation: 'none'\n    }\n  };\n};\n/**\n * ## ARIA\n *\n * If the progress bar is describing the loading progress of a particular region of a page,\n * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\n * attribute to `true` on that region until it has finished loading.\n */\n\nvar CircularProgress = React.forwardRef(function CircularProgress(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$disableShrink = props.disableShrink,\n      disableShrink = _props$disableShrink === void 0 ? false : _props$disableShrink,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 40 : _props$size,\n      style = props.style,\n      _props$thickness = props.thickness,\n      thickness = _props$thickness === void 0 ? 3.6 : _props$thickness,\n      _props$value = props.value,\n      value = _props$value === void 0 ? 0 : _props$value,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'indeterminate' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"disableShrink\", \"size\", \"style\", \"thickness\", \"value\", \"variant\"]);\n\n  var circleStyle = {};\n  var rootStyle = {};\n  var rootProps = {};\n\n  if (variant === 'determinate' || variant === 'static') {\n    var circumference = 2 * Math.PI * ((SIZE - thickness) / 2);\n    circleStyle.strokeDasharray = circumference.toFixed(3);\n    rootProps['aria-valuenow'] = Math.round(value);\n\n    if (variant === 'static') {\n      circleStyle.strokeDashoffset = \"\".concat(((100 - value) / 100 * circumference).toFixed(3), \"px\");\n      rootStyle.transform = 'rotate(-90deg)';\n    } else {\n      circleStyle.strokeDashoffset = \"\".concat((easeIn((100 - value) / 100) * circumference).toFixed(3), \"px\");\n      rootStyle.transform = \"rotate(\".concat((easeOut(value / 70) * 270).toFixed(3), \"deg)\");\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, color !== 'inherit' && classes[\"color\".concat(capitalize(color))], {\n      'indeterminate': classes.indeterminate,\n      'static': classes[\"static\"]\n    }[variant]),\n    style: _extends({\n      width: size,\n      height: size\n    }, rootStyle, {}, style),\n    ref: ref,\n    role: \"progressbar\"\n  }, rootProps, other), /*#__PURE__*/React.createElement(\"svg\", {\n    className: classes.svg,\n    viewBox: \"\".concat(SIZE / 2, \" \").concat(SIZE / 2, \" \").concat(SIZE, \" \").concat(SIZE)\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    className: clsx(classes.circle, disableShrink && classes.circleDisableShrink, {\n      'indeterminate': classes.circleIndeterminate,\n      'static': classes.circleStatic\n    }[variant]),\n    style: circleStyle,\n    cx: SIZE,\n    cy: SIZE,\n    r: (SIZE - thickness) / 2,\n    fill: \"none\",\n    strokeWidth: thickness\n  })));\n});\nprocess.env.NODE_ENV !== \"production\" ? CircularProgress.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary', 'inherit']),\n\n  /**\n   * If `true`, the shrink animation is disabled.\n   * This only works if variant is `indeterminate`.\n   */\n  disableShrink: chainPropTypes(PropTypes.bool, function (props) {\n    if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {\n      return new Error('Material-UI: you have provided the `disableShrink` prop ' + 'with a variant other than `indeterminate`. This will have no effect.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * The size of the circle.\n   * If using a number, the pixel unit is assumed.\n   * If using a string, you need to provide the CSS unit, e.g '3rem'.\n   */\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * The thickness of the circle.\n   */\n  thickness: PropTypes.number,\n\n  /**\n   * The value of the progress indicator for the determinate and static variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number,\n\n  /**\n   * The variant to use.\n   * Use indeterminate when there is no progress value.\n   */\n  variant: PropTypes.oneOf(['determinate', 'indeterminate', 'static'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCircularProgress',\n  flip: false\n})(CircularProgress);"],"sourceRoot":""}