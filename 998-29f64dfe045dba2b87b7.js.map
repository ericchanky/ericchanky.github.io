{"version":3,"sources":["webpack://tools/./node_modules/gatsby/node_modules/core-js/internals/flatten-into-array.js","webpack://tools/./node_modules/gatsby/node_modules/core-js/modules/es.array.flat.js"],"names":["isArray","toLength","bind","flattenIntoArray","target","original","source","sourceLen","start","depth","mapper","thisArg","element","targetIndex","sourceIndex","mapFn","length","TypeError","module","exports","$","toObject","toInteger","arraySpeciesCreate","proto","flat","depthArg","arguments","undefined","O","this","A"],"mappings":"oGACA,IAAIA,EAAU,EAAQ,OAClBC,EAAW,EAAQ,OACnBC,EAAO,EAAQ,OAIfC,EAAmB,SAAUC,EAAQC,EAAUC,EAAQC,EAAWC,EAAOC,EAAOC,EAAQC,GAM1F,IALA,IAGIC,EAHAC,EAAcL,EACdM,EAAc,EACdC,IAAQL,GAASR,EAAKQ,EAAQC,EAAS,GAGpCG,EAAcP,GAAW,CAC9B,GAAIO,KAAeR,EAAQ,CAGzB,GAFAM,EAAUG,EAAQA,EAAMT,EAAOQ,GAAcA,EAAaT,GAAYC,EAAOQ,GAEzEL,EAAQ,GAAKT,EAAQY,GACvBC,EAAcV,EAAiBC,EAAQC,EAAUO,EAASX,EAASW,EAAQI,QAASH,EAAaJ,EAAQ,GAAK,MACzG,CACL,GAAII,GAAe,iBAAkB,MAAMI,UAAU,sCACrDb,EAAOS,GAAeD,EAGxBC,IAEFC,IAEF,OAAOD,GAGTK,EAAOC,QAAUhB,G,mCC9BjB,IAAIiB,EAAI,EAAQ,OACZjB,EAAmB,EAAQ,OAC3BkB,EAAW,EAAQ,OACnBpB,EAAW,EAAQ,OACnBqB,EAAY,EAAQ,OACpBC,EAAqB,EAAQ,OAIjCH,EAAE,CAAEhB,OAAQ,QAASoB,OAAO,GAAQ,CAClCC,KAAM,WACJ,IAAIC,EAAWC,UAAUX,OAASW,UAAU,QAAKC,EAC7CC,EAAIR,EAASS,MACbvB,EAAYN,EAAS4B,EAAEb,QACvBe,EAAIR,EAAmBM,EAAG,GAE9B,OADAE,EAAEf,OAASb,EAAiB4B,EAAGF,EAAGA,EAAGtB,EAAW,OAAgBqB,IAAbF,EAAyB,EAAIJ,EAAUI,IACnFK","file":"998-29f64dfe045dba2b87b7.js","sourcesContent":["'use strict';\nvar isArray = require('../internals/is-array');\nvar toLength = require('../internals/to-length');\nvar bind = require('../internals/function-bind-context');\n\n// `FlattenIntoArray` abstract operation\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? bind(mapper, thisArg, 3) : false;\n  var element;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      if (depth > 0 && isArray(element)) {\n        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;\n      } else {\n        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n};\n\nmodule.exports = flattenIntoArray;\n","'use strict';\nvar $ = require('../internals/export');\nvar flattenIntoArray = require('../internals/flatten-into-array');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar toInteger = require('../internals/to-integer');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\n// `Array.prototype.flat` method\n// https://github.com/tc39/proposal-flatMap\n$({ target: 'Array', proto: true }, {\n  flat: function flat(/* depthArg = 1 */) {\n    var depthArg = arguments.length ? arguments[0] : undefined;\n    var O = toObject(this);\n    var sourceLen = toLength(O.length);\n    var A = arraySpeciesCreate(O, 0);\n    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));\n    return A;\n  }\n});\n"],"sourceRoot":""}